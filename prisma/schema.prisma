// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Student {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  dateOfBirth       DateTime?
  studentId         String   @unique
  blockchainAddress String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  academicRecords   AcademicRecord[]
  athleticRecords   AthleticRecord[]
  certificates      Certificate[]
  verifications     Verification[]
  
  @@map("students")
}

model Institution {
  id          String   @id @default(cuid())
  name        String
  type        String // "university", "school", "sports_organization"
  address     String?
  blockchainAddress String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  certificates Certificate[]
  academicRecords AcademicRecord[]
  athleticRecords AthleticRecord[]
  verifications Verification[]
  
  @@map("institutions")
}

model AcademicRecord {
  id             String   @id @default(cuid())
  studentId      String
  institutionId  String?
  title          String
  degree         String?
  field          String?
  startDate      DateTime
  endDate        DateTime?
  grade          String?
  gpa            Float?
  blockchainHash String?
  blockchainTx   String?
  status         String   @default("pending") // "pending", "verified", "rejected"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  student        Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  institution    Institution? @relation(fields: [institutionId], references: [id])
  
  @@map("academic_records")
}

model AthleticRecord {
  id             String   @id @default(cuid())
  studentId      String
  institutionId  String?
  sport          String
  achievement    String
  competition    String?
  date           DateTime
  position       String?
  record         String?
  blockchainHash String?
  blockchainTx   String?
  status         String   @default("pending") // "pending", "verified", "rejected"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  student        Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  institution    Institution? @relation(fields: [institutionId], references: [id])
  
  @@map("athletic_records")
}

model Certificate {
  id             String   @id @default(cuid())
  studentId      String
  institutionId  String
  title          String
  description    String?
  issueDate      DateTime
  expiryDate     DateTime?
  blockchainHash String?
  blockchainTx   String?
  fileUrl        String?
  status         String   @default("pending") // "pending", "verified", "rejected"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  student        Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  institution    Institution @relation(fields: [institutionId], references: [id])
  
  @@map("certificates")
}

model Verification {
  id             String   @id @default(cuid())
  recordId       String
  recordType     String   // "academic", "athletic", "certificate"
  verifierId     String
  verifierType   String   // "institution", "employer", "auto"
  studentId      String
  blockchainHash String?
  status         String   @default("pending") // "pending", "verified", "rejected"
  comments       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  student        Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  verifier       Institution @relation(fields: [verifierId], references: [id])
  
  @@map("verifications")
}